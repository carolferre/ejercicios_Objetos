
HERENCIA:

Traslada el comportamiento entre personas que ocurre en la vida real a código de programación, con algunas pequeñas diferencias.

Ejemplo tenemos un abuelo, padre y tres hijos (Esto es una jerarquía de herencia). Imaginemos que el abuelo tiene una casa, un padre tiene un coche y los hijos tienen bicis.
La herencia consiste en que si el abuelo fallece se hereda la casa, al padre, si el padre fallece el coche pasa a los hijos y la casa.

Se sustituye a esas personas por clases: clase 1 es la clase padre o superclase, clase 2 es la clase padre y subclase, es subclase de clase 1 y a su vez es superclase de clase 3, clase 4 y clase 5. 
Clase 3, clase 4 y clase 5 son subclases de clase 2.

Se reutiliza código en caso de crear objetos similares.

Imaginemos que creamos un programa para construir objetos de tipo coche, tipo camión, tipo motocicleta que ambos son medios de transporte.
Hay que ver qué características en común tienen todos los objetos que vamos a construir (marca, modelo),
también hay que ver qué comportamientos en común tienen todos los objetos (arrancan, aceleran, frenan).

La herencia consiste en coger todos las características y comportamientos en común y reunirlas en una clase, y luego las particularidades de cada uno las creamos en otra clase.

class MediosTransporte():
  def__init__(self, marca, modelo):
    self.marca=marca
    self.modelo=modelo
    self.enmarcha=False
    self.acelera=False
    self.frena=False
  
  def arrancar(self):
    self.enmarcha=True
  
  def acelerar(self):
    self.acelera=True
  
  def frenar(self):
    self.frena=True
    
  def estado(self):
    print("Marca; ",self.marca, "\nModelo: ",self.modelo, "\nEn Marcha: ",self.enmarcha, "\nAcelerando: ",self.acelera, "\nFrenando: ",self.frena)
 
 class Moto(Vehiculos):
    hcaballito=""
    def caballito(self):
      hcaballito="Voy haciendo el caballito"
      
 
 miMoto=Moto("Honda", "CBR")
 miMoto.caballito()
 miMoto.estado()
